/**
* Generated by go-doudou v2.5.13.
* You can edit it as your need.
 */
package plugin

import (
	service "example/doudou-app"
	"example/doudou-app/config"
	"example/doudou-app/transport/httpsrv"
	"os"

	"github.com/unionj-cloud/go-doudou/v2/framework/grpcx"
	"github.com/unionj-cloud/go-doudou/v2/framework/plugin"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/toolkit/pipeconn"
	"github.com/unionj-cloud/toolkit/stringutils"
	"google.golang.org/grpc"
)

var _ plugin.ServicePlugin = (*DoudouPlugin)(nil)

type DoudouPlugin struct {
	grpcConns []*grpc.ClientConn
}

func (receiver *DoudouPlugin) Close() {
	for _, item := range receiver.grpcConns {
		item.Close()
	}
}

func (receiver *DoudouPlugin) GoDoudouServicePlugin() {

}

func (receiver *DoudouPlugin) GetName() string {
	name := os.Getenv("GDD_SERVICE_NAME")
	if stringutils.IsEmpty(name) {
		name = "cloud.unionj.Doudou"
	}
	return name
}

func (receiver *DoudouPlugin) Initialize(restServer *rest.RestServer, grpcServer *grpcx.GrpcServer, dialCtx pipeconn.DialContextFunc) {
	conf := config.LoadFromEnv()
	svc := service.NewDoudou(conf)
	routes := httpsrv.Routes(httpsrv.NewDoudouHandler(svc))
	restServer.GroupRoutes("/doudou-app", routes)
	restServer.GroupRoutes("/doudou-app", rest.DocRoutes(service.Oas))
}

func init() {
	plugin.RegisterServicePlugin(&DoudouPlugin{})
}
