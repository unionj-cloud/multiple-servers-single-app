/**
* Generated by go-doudou v2.5.13.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	service "example/doudou-app"
	"example/doudou-app/dto"
	"net/http"

	"github.com/bytedance/sonic"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
)

var json = sonic.ConfigDefault

type DoudouHandlerImpl struct {
	doudou service.Doudou
}

func (receiver *DoudouHandlerImpl) PostUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		user dto.GddUser
		data dto.GddUser
		err  error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&user); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(user); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.doudou.PostUser(
		ctx,
		user,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.GddUser `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *DoudouHandlerImpl) PutUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		user dto.GddUser
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&user); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(user); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.doudou.PutUser(
		ctx,
		user,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *DoudouHandlerImpl) DeleteUser(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx  context.Context
		user dto.GddUser
		re   error
	)
	ctx = _req.Context()
	if _err := json.NewDecoder(_req.Body).Decode(&user); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(user); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	re = receiver.doudou.DeleteUser(
		ctx,
		user,
	)
	if re != nil {
		panic(re)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
	}{}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}
func (receiver *DoudouHandlerImpl) GetUsers(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx       context.Context
		parameter dto.Parameter
		data      dto.Page
		err       error
	)
	ctx = _req.Context()
	if _err := _req.ParseForm(); _err != nil {
		rest.HandleBadRequestErr(_err)
	}
	if _err := rest.DecodeForm(&parameter, _req.Form); _err != nil {
		rest.HandleBadRequestErr(_err)
	} else {
		if _err := rest.ValidateStruct(parameter); _err != nil {
			rest.HandleBadRequestErr(_err)
		}
	}
	data, err = receiver.doudou.GetUsers(
		ctx,
		parameter,
	)
	if err != nil {
		panic(err)
	}
	_writer.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if _err := json.NewEncoder(_writer).Encode(struct {
		Data dto.Page `json:"data"`
	}{
		Data: data,
	}); _err != nil {
		rest.HandleInternalServerError(_err)
	}
}

func NewDoudouHandler(doudou service.Doudou) DoudouHandler {
	return &DoudouHandlerImpl{
		doudou,
	}
}
