/**
* Generated by go-doudou v2.5.13.
* You can edit it as your need.
 */
package main

import (
	_ "example/doudou-app/plugin"
	"example/hertz-app/routes"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/elazarl/goproxy"
	grpc_middleware "github.com/grpc-ecosystem/go-grpc-middleware"
	grpczerolog "github.com/grpc-ecosystem/go-grpc-middleware/providers/zerolog/v2"
	grpc_recovery "github.com/grpc-ecosystem/go-grpc-middleware/recovery"
	grpc_ctxtags "github.com/grpc-ecosystem/go-grpc-middleware/tags"
	grpc_opentracing "github.com/grpc-ecosystem/go-grpc-middleware/tracing/opentracing"
	"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/logging"
	"github.com/grpc-ecosystem/go-grpc-middleware/v2/interceptors/tags"
	grpc_prometheus "github.com/grpc-ecosystem/go-grpc-prometheus"
	hertzZerolog "github.com/hertz-contrib/logger/zerolog"
	"github.com/unionj-cloud/go-doudou/v2/framework/grpcx"
	"github.com/unionj-cloud/go-doudou/v2/framework/plugin"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	"github.com/unionj-cloud/toolkit/pipeconn"
	"github.com/unionj-cloud/toolkit/zlogger"
	"google.golang.org/grpc"
	"log"
	"net/http"
)

func main() {
	go func() {
		// 创建 Hertz 服务器
		h := server.Default(
			server.WithHostPorts(":6061"),
			server.WithMaxRequestBodySize(4*1024*1024), // 4MB
			server.WithBasePath("hertz-app"),           // 添加统一前缀
		)

		hlog.SetLogger(hertzZerolog.New())

		// 注册路由
		routes.RegisterRoutes(h)

		// 启动服务器
		log.Println("Hertz server starting on :6061 with /hertz-app prefix")
		h.Spin()
	}()

	go func() {
		srv := rest.NewRestServer()
		grpcServer := grpcx.NewGrpcServer(
			grpc.StreamInterceptor(grpc_middleware.ChainStreamServer(
				grpc_ctxtags.StreamServerInterceptor(),
				grpc_opentracing.StreamServerInterceptor(),
				grpc_prometheus.StreamServerInterceptor,
				tags.StreamServerInterceptor(tags.WithFieldExtractor(tags.CodeGenRequestFieldExtractor)),
				logging.StreamServerInterceptor(grpczerolog.InterceptorLogger(zlogger.Logger)),
				grpc_recovery.StreamServerInterceptor(),
			)),
			grpc.UnaryInterceptor(grpc_middleware.ChainUnaryServer(
				grpc_ctxtags.UnaryServerInterceptor(),
				grpc_opentracing.UnaryServerInterceptor(),
				grpc_prometheus.UnaryServerInterceptor,
				tags.UnaryServerInterceptor(tags.WithFieldExtractor(tags.CodeGenRequestFieldExtractor)),
				logging.UnaryServerInterceptor(grpczerolog.InterceptorLogger(zlogger.Logger)),
				grpc_recovery.UnaryServerInterceptor(),
			)),
		)
		lis, dialCtx := pipeconn.NewPipeListener()
		plugins := plugin.GetServicePlugins()
		for _, key := range plugins.Keys() {
			value, _ := plugins.Get(key)
			value.Initialize(srv, grpcServer, dialCtx)
		}
		defer func() {
			if r := recover(); r != nil {
				zlogger.Info().Msgf("Recovered. Error: %v\n", r)
			}
			for _, key := range plugins.Keys() {
				value, _ := plugins.Get(key)
				value.Close()
			}
		}()
		go func() {
			grpcServer.RunWithPipe(lis)
		}()
		srv.AddRoutes(rest.DocRoutes(""))
		srv.Run()
	}()

	proxy := goproxy.NewProxyHttpServer()
	proxy.Verbose = true
	proxy.NonproxyHandler = http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
		if !goproxy.UrlHasPrefix("/hertz-app")(req, nil) && !goproxy.UrlHasPrefix("/doudou-app")(req, nil) {
			http.Error(w, "404 page not found", http.StatusNotFound)
			return
		}
		req.URL.Scheme = "http"
		req.URL.Host = req.Host
		proxy.ServeHTTP(w, req)
	})
	proxy.OnRequest().HandleConnect(goproxy.AlwaysMitm)
	proxy.OnRequest(goproxy.UrlHasPrefix("/hertz-app")).Do(goproxy.FuncReqHandler(func(req *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
		req.URL.Host = "localhost:6061"
		return req, nil
	}))
	proxy.OnRequest(goproxy.UrlHasPrefix("/doudou-app")).Do(goproxy.FuncReqHandler(func(req *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
		req.URL.Host = "localhost:6060"
		return req, nil
	}))
	log.Fatal(http.ListenAndServe(":8080", proxy))
}
